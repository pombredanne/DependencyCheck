#**
This file is part of Dependency-Check.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Copyright (c) 2012 Jeremy Long. All Rights Reserved.

@author Jeremy Long <jeremy.long@owasp.org>
@version 1.2

*#<?xml version="1.0"?>
<analysis xmlns="https://jeremylong.github.io/DependencyCheck/dependency-check.1.5.xsd">
    <scanInfo>
        <engineVersion>$version</engineVersion>
#foreach($prop in $properties.getMetaData().entrySet())
        <dataSource>
            <name>$enc.xml($prop.key)</name>
            <timestamp>$enc.xml($prop.value)</timestamp>
        </dataSource>
#end
    </scanInfo>
    <projectInfo>
        <name>$enc.xml($applicationName)</name>
#if ($groupID)
        <groupID>$enc.xml($groupID)</groupID>
#end
#if ($artifactID)        
        <artifactID>$enc.xml($artifactID)</artifactID>
#end
#if ($version)
        <version>$enc.xml($version)</version>
#end
        <reportDate>$scanDateXML</reportDate>
        <credits>This report contains data retrieved from the National Vulnerability Database: http://nvd.nist.gov</credits>
    </projectInfo>
    <dependencies>
#foreach($dependency in $dependencies)
        <dependency>
            <fileName>$enc.xml($dependency.DisplayFileName)</fileName>
            <filePath>$enc.xml($dependency.FilePath)</filePath>
            <md5>$enc.xml($dependency.Md5sum)</md5>
            <sha1>$enc.xml($dependency.Sha1sum)</sha1>
#if ($dependency.description)
            <description>$enc.xml($dependency.description)</description>
#end
#if ($dependency.license)
            <license>$enc.xml($dependency.license)</license>
#end
#if ($dependency.getRelatedDependencies().size()>0)
            <relatedDependencies>
#foreach($related in $dependency.getRelatedDependencies())
                <relatedDependency>
                    <filePath>$enc.xml($related.FilePath)</filePath>
                    <sha1>$enc.xml($related.Sha1sum)</sha1>
                    <md5>$enc.xml($related.Md5sum)</md5>
#foreach($id in $related.getIdentifiers())
#if ($id.type=="maven")
                    <identifier type="$enc.xml($id.type)">
                        <name>($id.value)</name>
#if( $id.url )
                        <url>$enc.xml($id.url)</url>
#end
#if ($id.notes)
                        <notes>$enc.xml($id.notes)</notes>
#end
                    </identifier>
#end
#end
                </relatedDependency>
#end
            </relatedDependencies>
#end
            <evidenceCollected>
#foreach($evidence in $dependency.getVendorEvidence())
                <evidence type="vendor" confidence="$enc.xml($evidence.getConfidence().toString())">
                    <source>$enc.xml($evidence.getSource())</source>
                    <name>$enc.xml($evidence.getName())</name>
                    <value>$enc.xml($evidence.getValue().trim())</value>
                </evidence>
#end
#foreach($evidence in $dependency.getProductEvidence())
                <evidence type="product" confidence="$enc.xml($evidence.getConfidence().toString())">
                    <source>$enc.xml($evidence.getSource())</source>
                    <name>$enc.xml($evidence.getName())</name>
                    <value>$enc.xml($evidence.getValue().trim())</value>
                </evidence>
#end
#foreach($evidence in $dependency.getVersionEvidence())
                <evidence type="version" confidence="$enc.xml($evidence.getConfidence().toString())">
                    <source>$enc.xml($evidence.getSource())</source>
                    <name>$enc.xml($evidence.getName())</name>
                    <value>$enc.xml($evidence.getValue().trim())</value>
                </evidence>
#end
            </evidenceCollected>
#if($dependency.getIdentifiers().size()>0)
            <identifiers>
#foreach($id in $dependency.getIdentifiers())
                <identifier type="$enc.xml($id.type)" #if($id.confidence)confidence="$id.confidence"#end>
                    <name>($id.value)</name>
#if( $id.url )
                    <url>$enc.xml($id.url)</url>
#end
#if( $id.description )
                    <description>$enc.xml($id.description)</description>
#end
#if ($id.notes)
                    <notes>$enc.xml($id.notes)</notes>
#end
                </identifier>
#end
#foreach($id in $dependency.getSuppressedIdentifiers())
                <suppressedIdentifier type="$enc.xml($id.type)" #if($id.confidence)confidence="$id.confidence"#end>
                    <name>($id.value)</name>
#if( $id.url )
                    <url>$enc.xml($id.url)</url>
#end
#if( $id.description )
                    <description>$enc.xml($id.description)</description>
#end
#if ($id.notes)
                    <notes>$enc.xml($id.notes)</notes>
#end
                </suppressedIdentifier>
#end
            </identifiers>
#end
#if($dependency.getVulnerabilities().size()>0 || $dependency.getSuppressedVulnerabilities().size()>0)
            <vulnerabilities>
#foreach($vuln in $dependency.getVulnerabilities())
                <vulnerability>
                    <name>$enc.xml($vuln.name)</name>
                    <cvssScore>$vuln.cvssScore</cvssScore>
                    <cvssAccessVector>$enc.xml($vuln.cvssAccessVector)</cvssAccessVector>
                    <cvssAccessComplexity>$enc.xml($vuln.cvssAccessComplexity)</cvssAccessComplexity>
                    <cvssAuthenticationr>$enc.xml($vuln.cvssAuthentication)</cvssAuthenticationr>
                    <cvssConfidentialImpact>$enc.xml($vuln.cvssConfidentialityImpact)</cvssConfidentialImpact>
                    <cvssIntegrityImpact>$enc.xml($vuln.cvssIntegrityImpact)</cvssIntegrityImpact>
                    <cvssAvailabilityImpact>$enc.xml($vuln.cvssAvailabilityImpact)</cvssAvailabilityImpact>
#if ($vuln.cvssScore<4.0)
                    <severity>Low</severity>
#elseif ($vuln.cvssScore>=7.0)
                    <severity>High</severity>
#else
                    <severity>Medium</severity>
#end
#if ($vuln.cwe)
                    <cwe>$enc.xml($vuln.cwe)</cwe>
#end
                    <description>$enc.xml($vuln.description)</description>
#if ($vuln.notes)
                    <notes>$enc.xml($vuln.notes)</notes>
#end
                    <references>
#foreach($ref in $vuln.getReferences())
                        <reference>
                            <source>$enc.xml($ref.source)</source>
                            <url>$enc.xml($ref.url)</url>
                            <name>$enc.xml($ref.name)</name>
                        </reference>
#end
                    </references>
                    <vulnerableSoftware>
#foreach($vs in $vuln.getVulnerableSoftware())
                        <software#if($vs.hasPreviousVersion()) allPreviousVersion="true"#end>$enc.xml($vs.name)</software>
#end
                    </vulnerableSoftware>
                </vulnerability>
#end
#foreach($vuln in $dependency.getSuppressedVulnerabilities())
                <suppressedVulnerability>
                    <name>$enc.xml($vuln.name)</name>
                    <cvssScore>$vuln.cvssScore</cvssScore>
                    <cvssAccessVector>$enc.xml($vuln.cvssAccessVector)</cvssAccessVector>
                    <cvssAccessComplexity>$enc.xml($vuln.cvssAccessComplexity)</cvssAccessComplexity>
                    <cvssAuthenticationr>$enc.xml($vuln.cvssAuthentication)</cvssAuthenticationr>
                    <cvssConfidentialImpact>$enc.xml($vuln.cvssConfidentialityImpact)</cvssConfidentialImpact>
                    <cvssIntegrityImpact>$enc.xml($vuln.cvssIntegrityImpact)</cvssIntegrityImpact>
                    <cvssAvailabilityImpact>$enc.xml($vuln.cvssAvailabilityImpact)</cvssAvailabilityImpact>
#if ($vuln.cvssScore<4.0)
                    <severity>Low</severity>
#elseif ($vuln.cvssScore>=7.0)
                    <severity>High</severity>
#else
                    <severity>Medium</severity>
#end
#if ($vuln.cwe)
                    <cwe>$enc.xml($vuln.cwe)</cwe>
#end
                    <description>$enc.xml($vuln.description)</description>
#if ($vuln.notes)
                    <notes>$enc.xml($vuln.notes)</notes>
#end
                    <references>
#foreach($ref in $vuln.getReferences())
                        <reference>
                            <source>$enc.xml($ref.source)</source>
                            <url>$enc.xml($ref.url)</url>
                            <name>$enc.xml($ref.name)</name>
                        </reference>
#end
                    </references>
                    <vulnerableSoftware>
#foreach($vs in $vuln.getVulnerableSoftware())
                        <software#if($vs.hasPreviousVersion()) allPreviousVersion="true"#end>$enc.xml($vs.name)</software>
#end
                    </vulnerableSoftware>
                </suppressedVulnerability>
#end
            </vulnerabilities>
#end
        </dependency>
#end
    </dependencies>
</analysis>